name: CI/CD Pipeline - ProfessorXTrader

on:
  push:
    branches: [ main, develop, feature/*, fix/* ]
  pull_request:

jobs:
  test:
    name: test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.17.0, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Setup Node.js (with cache)
      if: ${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json','**/yarn.lock') != '' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: npm
        cache-dependency-path: package-lock.json
    
    - name: Setup Node.js (no cache)
      if: ${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json','**/yarn.lock') == '' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    - name: Install deps + project setup
      run: |
        if [ -f package-lock.json ]; then npm ci; else npm install; fi
        npm run ai-setup
    
    - name: Typecheck
      run: npm run type-check --if-present
    
    - name: Lint
      run: npm run lint --if-present
    
    - name: Tests
      run: |
        npm run test-api --if-present
        npm run indicators-test --if-present
        npm run test-ai-api --if-present
      env:
        BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
        BINANCE_SECRET_KEY: ${{ secrets.BINANCE_SECRET_KEY }}
        BINANCE_TESTNET: true
        ENABLE_AI_FEATURES: true
        TENSORFLOW_BACKEND: cpu
    
    - name: Build
      run: npm run build --if-present
      env:
        ENABLE_AI_FEATURES: true
        TENSORFLOW_BACKEND: cpu

  deploy:
    name: deploy
    needs: test
    if: github.ref == 'refs/heads/main' && needs.test.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - uses: actions/setup-node@v4
      with:
        node-version: 20.x
    
    - name: Install + Build
      run: |
        npm ci || npm install
        npm run build
      env:
        ENABLE_AI_FEATURES: true
        TENSORFLOW_BACKEND: cpu
    
    - name: Deploy to Vercel
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: .
        prod: true
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}