name: CI/CD Pipeline - ProfessorXTrader

on:
  push:
    branches: [ main, develop, feature/*, fix/* ]
  pull_request:

jobs:
  test:
    name: test (Node ${{ matrix.node-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        node-version: [18.17.0, 20.x]
    
    steps:
    - uses: actions/checkout@v4
    
    # CRITICAL FIX: Use matrix version, not .nvmrc to avoid conflicts
    - name: Setup Node.js (with cache)
      if: ${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json','**/yarn.lock') != '' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: npm
        cache-dependency-path: package-lock.json
    
    - name: Setup Node.js (no cache)
      if: ${{ hashFiles('**/package-lock.json','**/npm-shrinkwrap.json','**/yarn.lock') == '' }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
    
    # DEBUG: Show exact versions being used
    - name: Debug Node/npm versions
      run: |
        node -v
        npm -v
        npx -v
        echo "Expected Node: ${{ matrix.node-version }}"
        echo "Package-lock exists: $([ -f package-lock.json ] && echo 'YES' || echo 'NO')"
        if [ -f package-lock.json ]; then
          echo "Lock file size: $(wc -l < package-lock.json) lines"
        fi
    
    # CRITICAL FIX: Handle corrupted package-lock.json
    - name: Install deps + project setup (with corruption handling)
      run: |
        # First attempt with npm ci (preferred for CI)
        if [ -f package-lock.json ]; then
          echo "Attempting npm ci..."
          if ! npm ci; then
            echo "npm ci failed, likely due to corrupted lock file"
            echo "Regenerating package-lock.json..."
            rm -f package-lock.json
            npm install
            echo "New lock file generated, committing will be needed"
          fi
        else
          npm install
        fi
        # Run AI setup if available
        npm run ai-setup || echo "ai-setup not available or failed"
    
    - name: Typecheck
      run: npm run type-check --if-present
    
    - name: Lint
      run: npm run lint --if-present
    
    - name: Tests
      run: |
        npm run test-api --if-present
        npm run indicators-test --if-present
        npm run test-ai-api --if-present
      env:
        BINANCE_API_KEY: ${{ secrets.BINANCE_API_KEY }}
        BINANCE_SECRET_KEY: ${{ secrets.BINANCE_SECRET_KEY }}
        BINANCE_TESTNET: true
        ENABLE_AI_FEATURES: true
        TENSORFLOW_BACKEND: cpu
    
    - name: Build
      run: npm run build --if-present
      env:
        ENABLE_AI_FEATURES: true
        TENSORFLOW_BACKEND: cpu
    
    # CONTINUE-ON-ERROR only for uploads/artifacts
    - name: Upload coverage reports
      if: always()
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: coverage-${{ matrix.node-version }}
        path: coverage/
        retention-days: 7
    
    - name: Upload build artifacts
      if: always() 
      continue-on-error: true
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.node-version }}
        path: .next/
        retention-days: 3

  deploy:
    name: deploy
    needs: test
    if: github.ref == 'refs/heads/main' && needs.test.result == 'success'
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    # For deploy, use .nvmrc since it's main branch
    - uses: actions/setup-node@v4
      with:
        node-version-file: .nvmrc
        cache: npm
        cache-dependency-path: package-lock.json
    
    - name: Install + Build (with fallback)
      run: |
        npm ci || (echo "npm ci failed, using npm install" && npm install)
        npm run build
      env:
        ENABLE_AI_FEATURES: true
        TENSORFLOW_BACKEND: cpu
    
    - name: Deploy to Vercel
      continue-on-error: true
      uses: amondnet/vercel-action@v25
      with:
        vercel-token: ${{ secrets.VERCEL_TOKEN }}
        vercel-org-id: ${{ secrets.ORG_ID }}
        vercel-project-id: ${{ secrets.PROJECT_ID }}
        working-directory: .
        prod: true
      env:
        VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}